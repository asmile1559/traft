// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: raft.proto

package raftpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestVoteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	CandidateId   string                 `protobuf:"bytes,2,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	LastLogIndex  uint64                 `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	LastLogTerm   uint64                 `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm,proto3" json:"last_log_term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteReq) Reset() {
	*x = RequestVoteReq{}
	mi := &file_raft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteReq) ProtoMessage() {}

func (x *RequestVoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteReq.ProtoReflect.Descriptor instead.
func (*RequestVoteReq) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{0}
}

func (x *RequestVoteReq) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteReq) GetCandidateId() string {
	if x != nil {
		return x.CandidateId
	}
	return ""
}

func (x *RequestVoteReq) GetLastLogIndex() uint64 {
	if x != nil {
		return x.LastLogIndex
	}
	return 0
}

func (x *RequestVoteReq) GetLastLogTerm() uint64 {
	if x != nil {
		return x.LastLogTerm
	}
	return 0
}

type RequestVoteResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	VoteGranted   bool                   `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted,proto3" json:"vote_granted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteResp) Reset() {
	*x = RequestVoteResp{}
	mi := &file_raft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteResp) ProtoMessage() {}

func (x *RequestVoteResp) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteResp.ProtoReflect.Descriptor instead.
func (*RequestVoteResp) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{1}
}

func (x *RequestVoteResp) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteResp) GetVoteGranted() bool {
	if x != nil {
		return x.VoteGranted
	}
	return false
}

type LogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint64                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term          uint64                 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_raft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{2}
}

func (x *LogEntry) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LogEntry) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LogEntry) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppendEntriesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId      string                 `protobuf:"bytes,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	PrevLogIndex  uint64                 `protobuf:"varint,3,opt,name=prev_log_index,json=prevLogIndex,proto3" json:"prev_log_index,omitempty"`
	PrevLogTerm   uint64                 `protobuf:"varint,4,opt,name=prev_log_term,json=prevLogTerm,proto3" json:"prev_log_term,omitempty"`
	Entries       []*LogEntry            `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
	LeaderCommit  uint64                 `protobuf:"varint,6,opt,name=leader_commit,json=leaderCommit,proto3" json:"leader_commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendEntriesReq) Reset() {
	*x = AppendEntriesReq{}
	mi := &file_raft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesReq) ProtoMessage() {}

func (x *AppendEntriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesReq.ProtoReflect.Descriptor instead.
func (*AppendEntriesReq) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{3}
}

func (x *AppendEntriesReq) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntriesReq) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *AppendEntriesReq) GetPrevLogIndex() uint64 {
	if x != nil {
		return x.PrevLogIndex
	}
	return 0
}

func (x *AppendEntriesReq) GetPrevLogTerm() uint64 {
	if x != nil {
		return x.PrevLogTerm
	}
	return 0
}

func (x *AppendEntriesReq) GetEntries() []*LogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *AppendEntriesReq) GetLeaderCommit() uint64 {
	if x != nil {
		return x.LeaderCommit
	}
	return 0
}

type AppendEntriesResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	MatchIndex    uint64                 `protobuf:"varint,3,opt,name=match_index,json=matchIndex,proto3" json:"match_index,omitempty"`
	ConflictIndex uint64                 `protobuf:"varint,4,opt,name=conflict_index,json=conflictIndex,proto3" json:"conflict_index,omitempty"`
	ConflictTerm  uint64                 `protobuf:"varint,5,opt,name=conflict_term,json=conflictTerm,proto3" json:"conflict_term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendEntriesResp) Reset() {
	*x = AppendEntriesResp{}
	mi := &file_raft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntriesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesResp) ProtoMessage() {}

func (x *AppendEntriesResp) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesResp.ProtoReflect.Descriptor instead.
func (*AppendEntriesResp) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{4}
}

func (x *AppendEntriesResp) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntriesResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AppendEntriesResp) GetMatchIndex() uint64 {
	if x != nil {
		return x.MatchIndex
	}
	return 0
}

func (x *AppendEntriesResp) GetConflictIndex() uint64 {
	if x != nil {
		return x.ConflictIndex
	}
	return 0
}

func (x *AppendEntriesResp) GetConflictTerm() uint64 {
	if x != nil {
		return x.ConflictTerm
	}
	return 0
}

type Snapshot struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LastIncludedIndex uint64                 `protobuf:"varint,1,opt,name=last_included_index,json=lastIncludedIndex,proto3" json:"last_included_index,omitempty"`
	LastIncludedTerm  uint64                 `protobuf:"varint,2,opt,name=last_included_term,json=lastIncludedTerm,proto3" json:"last_included_term,omitempty"`
	Data              []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	mi := &file_raft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{5}
}

func (x *Snapshot) GetLastIncludedIndex() uint64 {
	if x != nil {
		return x.LastIncludedIndex
	}
	return 0
}

func (x *Snapshot) GetLastIncludedTerm() uint64 {
	if x != nil {
		return x.LastIncludedTerm
	}
	return 0
}

func (x *Snapshot) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type InstallSnapshotReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId      string                 `protobuf:"bytes,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	Snapshot      *Snapshot              `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallSnapshotReq) Reset() {
	*x = InstallSnapshotReq{}
	mi := &file_raft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallSnapshotReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallSnapshotReq) ProtoMessage() {}

func (x *InstallSnapshotReq) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallSnapshotReq.ProtoReflect.Descriptor instead.
func (*InstallSnapshotReq) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{6}
}

func (x *InstallSnapshotReq) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *InstallSnapshotReq) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *InstallSnapshotReq) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type InstallSnapshotResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallSnapshotResp) Reset() {
	*x = InstallSnapshotResp{}
	mi := &file_raft_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallSnapshotResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallSnapshotResp) ProtoMessage() {}

func (x *InstallSnapshotResp) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallSnapshotResp.ProtoReflect.Descriptor instead.
func (*InstallSnapshotResp) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{7}
}

func (x *InstallSnapshotResp) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *InstallSnapshotResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_raft_proto protoreflect.FileDescriptor

const file_raft_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"raft.proto\x12\x04raft\"\x91\x01\n" +
	"\x0eRequestVoteReq\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12!\n" +
	"\fcandidate_id\x18\x02 \x01(\tR\vcandidateId\x12$\n" +
	"\x0elast_log_index\x18\x03 \x01(\x04R\flastLogIndex\x12\"\n" +
	"\rlast_log_term\x18\x04 \x01(\x04R\vlastLogTerm\"H\n" +
	"\x0fRequestVoteResp\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12!\n" +
	"\fvote_granted\x18\x02 \x01(\bR\vvoteGranted\"H\n" +
	"\bLogEntry\x12\x14\n" +
	"\x05index\x18\x01 \x01(\x04R\x05index\x12\x12\n" +
	"\x04term\x18\x02 \x01(\x04R\x04term\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"\xdc\x01\n" +
	"\x10AppendEntriesReq\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x1b\n" +
	"\tleader_id\x18\x02 \x01(\tR\bleaderId\x12$\n" +
	"\x0eprev_log_index\x18\x03 \x01(\x04R\fprevLogIndex\x12\"\n" +
	"\rprev_log_term\x18\x04 \x01(\x04R\vprevLogTerm\x12(\n" +
	"\aentries\x18\x05 \x03(\v2\x0e.raft.LogEntryR\aentries\x12#\n" +
	"\rleader_commit\x18\x06 \x01(\x04R\fleaderCommit\"\xae\x01\n" +
	"\x11AppendEntriesResp\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x1f\n" +
	"\vmatch_index\x18\x03 \x01(\x04R\n" +
	"matchIndex\x12%\n" +
	"\x0econflict_index\x18\x04 \x01(\x04R\rconflictIndex\x12#\n" +
	"\rconflict_term\x18\x05 \x01(\x04R\fconflictTerm\"|\n" +
	"\bSnapshot\x12.\n" +
	"\x13last_included_index\x18\x01 \x01(\x04R\x11lastIncludedIndex\x12,\n" +
	"\x12last_included_term\x18\x02 \x01(\x04R\x10lastIncludedTerm\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"q\n" +
	"\x12InstallSnapshotReq\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x1b\n" +
	"\tleader_id\x18\x02 \x01(\tR\bleaderId\x12*\n" +
	"\bsnapshot\x18\x03 \x01(\v2\x0e.raft.SnapshotR\bsnapshot\"C\n" +
	"\x13InstallSnapshotResp\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess2\xda\x01\n" +
	"\fTRaftService\x12<\n" +
	"\vRequestVote\x12\x14.raft.RequestVoteReq\x1a\x15.raft.RequestVoteResp\"\x00\x12B\n" +
	"\rAppendEntries\x12\x16.raft.AppendEntriesReq\x1a\x17.raft.AppendEntriesResp\"\x00\x12H\n" +
	"\x0fInstallSnapshot\x12\x18.raft.InstallSnapshotReq\x1a\x19.raft.InstallSnapshotResp\"\x00B7Z5github.com/asmile1559/traft/internal/apis/raft;raftpbb\x06proto3"

var (
	file_raft_proto_rawDescOnce sync.Once
	file_raft_proto_rawDescData []byte
)

func file_raft_proto_rawDescGZIP() []byte {
	file_raft_proto_rawDescOnce.Do(func() {
		file_raft_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_raft_proto_rawDesc), len(file_raft_proto_rawDesc)))
	})
	return file_raft_proto_rawDescData
}

var file_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_raft_proto_goTypes = []any{
	(*RequestVoteReq)(nil),      // 0: raft.RequestVoteReq
	(*RequestVoteResp)(nil),     // 1: raft.RequestVoteResp
	(*LogEntry)(nil),            // 2: raft.LogEntry
	(*AppendEntriesReq)(nil),    // 3: raft.AppendEntriesReq
	(*AppendEntriesResp)(nil),   // 4: raft.AppendEntriesResp
	(*Snapshot)(nil),            // 5: raft.Snapshot
	(*InstallSnapshotReq)(nil),  // 6: raft.InstallSnapshotReq
	(*InstallSnapshotResp)(nil), // 7: raft.InstallSnapshotResp
}
var file_raft_proto_depIdxs = []int32{
	2, // 0: raft.AppendEntriesReq.entries:type_name -> raft.LogEntry
	5, // 1: raft.InstallSnapshotReq.snapshot:type_name -> raft.Snapshot
	0, // 2: raft.TRaftService.RequestVote:input_type -> raft.RequestVoteReq
	3, // 3: raft.TRaftService.AppendEntries:input_type -> raft.AppendEntriesReq
	6, // 4: raft.TRaftService.InstallSnapshot:input_type -> raft.InstallSnapshotReq
	1, // 5: raft.TRaftService.RequestVote:output_type -> raft.RequestVoteResp
	4, // 6: raft.TRaftService.AppendEntries:output_type -> raft.AppendEntriesResp
	7, // 7: raft.TRaftService.InstallSnapshot:output_type -> raft.InstallSnapshotResp
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_raft_proto_init() }
func file_raft_proto_init() {
	if File_raft_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_raft_proto_rawDesc), len(file_raft_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_raft_proto_goTypes,
		DependencyIndexes: file_raft_proto_depIdxs,
		MessageInfos:      file_raft_proto_msgTypes,
	}.Build()
	File_raft_proto = out.File
	file_raft_proto_goTypes = nil
	file_raft_proto_depIdxs = nil
}
