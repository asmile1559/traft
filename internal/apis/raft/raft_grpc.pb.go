// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: raft.proto

package raftpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TRaftService_RequestVote_FullMethodName     = "/raft.TRaftService/RequestVote"
	TRaftService_AppendEntries_FullMethodName   = "/raft.TRaftService/AppendEntries"
	TRaftService_InstallSnapshot_FullMethodName = "/raft.TRaftService/InstallSnapshot"
)

// TRaftServiceClient is the client API for TRaftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TRaftServiceClient interface {
	RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResp, error)
	AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResp, error)
	InstallSnapshot(ctx context.Context, in *InstallSnapshotReq, opts ...grpc.CallOption) (*InstallSnapshotResp, error)
}

type tRaftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTRaftServiceClient(cc grpc.ClientConnInterface) TRaftServiceClient {
	return &tRaftServiceClient{cc}
}

func (c *tRaftServiceClient) RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVoteResp)
	err := c.cc.Invoke(ctx, TRaftService_RequestVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRaftServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEntriesResp)
	err := c.cc.Invoke(ctx, TRaftService_AppendEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tRaftServiceClient) InstallSnapshot(ctx context.Context, in *InstallSnapshotReq, opts ...grpc.CallOption) (*InstallSnapshotResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallSnapshotResp)
	err := c.cc.Invoke(ctx, TRaftService_InstallSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TRaftServiceServer is the server API for TRaftService service.
// All implementations must embed UnimplementedTRaftServiceServer
// for forward compatibility.
type TRaftServiceServer interface {
	RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResp, error)
	AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesResp, error)
	InstallSnapshot(context.Context, *InstallSnapshotReq) (*InstallSnapshotResp, error)
	mustEmbedUnimplementedTRaftServiceServer()
}

// UnimplementedTRaftServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTRaftServiceServer struct{}

func (UnimplementedTRaftServiceServer) RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedTRaftServiceServer) AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedTRaftServiceServer) InstallSnapshot(context.Context, *InstallSnapshotReq) (*InstallSnapshotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallSnapshot not implemented")
}
func (UnimplementedTRaftServiceServer) mustEmbedUnimplementedTRaftServiceServer() {}
func (UnimplementedTRaftServiceServer) testEmbeddedByValue()                      {}

// UnsafeTRaftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TRaftServiceServer will
// result in compilation errors.
type UnsafeTRaftServiceServer interface {
	mustEmbedUnimplementedTRaftServiceServer()
}

func RegisterTRaftServiceServer(s grpc.ServiceRegistrar, srv TRaftServiceServer) {
	// If the following call pancis, it indicates UnimplementedTRaftServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TRaftService_ServiceDesc, srv)
}

func _TRaftService_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRaftServiceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRaftService_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRaftServiceServer).RequestVote(ctx, req.(*RequestVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRaftService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRaftServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRaftService_AppendEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRaftServiceServer).AppendEntries(ctx, req.(*AppendEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TRaftService_InstallSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSnapshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TRaftServiceServer).InstallSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TRaftService_InstallSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TRaftServiceServer).InstallSnapshot(ctx, req.(*InstallSnapshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TRaftService_ServiceDesc is the grpc.ServiceDesc for TRaftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TRaftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft.TRaftService",
	HandlerType: (*TRaftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _TRaftService_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _TRaftService_AppendEntries_Handler,
		},
		{
			MethodName: "InstallSnapshot",
			Handler:    _TRaftService_InstallSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
